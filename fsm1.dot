digraph finite_state_machine {
	compound = true;
	// concentrate=true;
	rankdir = LR;
	ranksep="0";
	nodesep="0.3";

	size = "8,6";
	ratio = fill;	

	node [style=filled,color=white];
	style = filled;
	color = lightgrey;

	node [shape = doublecircle]; input1Idle input2Idle input3Idle transceiverIdle listen;
	node [shape = ellipse];
	edge [fontsize = 10];

	subgraph cluster_input1 {
		label = "Sensor Input #1 FSM";
		input1Idle [ label = "input1\nIdle" ];
		input1Idle -> input1Sending [ label = "INPUT CHANGED" ];
		input1Sending -> input1Idle [ label = "INPUT SENT" ];
		input1Idle -> input1Idle [ label = "INPUT SENT" ];
	}

	subgraph cluster_input2 {
		label = "Sensor Input #2 FSM";
		input2Idle [ label = "input2\nIdle" ];
		input2Idle -> input2Sending [ label = "INPUT CHANGED" ];
		input2Sending -> input2Idle [ label = "INPUT SENT" ];
		input2Idle -> input2Idle [ label = "INPUT SENT" ];
	}

	subgraph cluster_input3 {
		label = "Sensor Input #3 FSM";
		input3Idle [ label = "input3\nIdle" ];
		input3Idle -> input3Sending [ label = "INPUT CHANGED" ];
		input3Sending -> input3Idle [ label = "INPUT SENT" ];
		input3Idle -> input3Idle [ label = "INPUT SENT" ];
	}

	subgraph cluster_transceiver {
		{ rank = same; transceiverSending; transceiverSent; }
		label = "Transceiver FSM";
		transceiverIdle [ label = "transceiver\nIdle" ];
		transceiverIdle -> transceiverSending [ label = "INPUT \l  CHANGED" ];
		transceiverSending -> transceiverSending [ weight = 1, label = "INPUT CHANGED / \r scheduleResend \r" ];
		transceiverSending -> transceiverSent [ weight = 1, label = "INPUT \r SENT \r " ];
		transceiverSent -> transceiverSent [ label = "INPUT CHANGED / \n scheduleResend \n" ];
		transceiverSent -> transceiverIdle [ label = "After 2.1 \l seconds\l" ];
		transceiverIdle -> transceiverSending [ label = "After 30 \l seconds" ];
	}

	subgraph cluster_wisol {
		{ rank = min; listen; end; }
		label = "Wisol FSM";
		listen [label="start / \n listen"]
		listen -> send [label = "Start listening \l for incoming data \l"];
		send -> send [label = "More data \l to send \l (Uplink) \l" ];
		send -> receive [label = "Send \l complete \l" ];
		receive -> receive [label = "More data \l to receive \l (Downlink) \l" ];
		receive -> timeout [ label = "After \l 60 \l seconds \l" ];
		receive -> end [label = "Receive complete" ];	
	}

	transceiverSending -> listen [style=dashed, label="Start the \l Wisol FSM \l to send data"];
	
}
